name: "Job Engine Release"

on:
  push:
    branches:
      - remove-maven

jobs:
  trigger-release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
      - id: release
        uses: google-github-actions/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target-branch: ${{ github.ref_name }}
          config-file: .github/release-please-config.json
          manifest-file: .github/.release-please-manifest.json

  publish-github:
    name: "Publish package to GitHub release"
    needs: trigger-release
    if: needs.trigger-release.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Build Package
        run: |
          poetry build --format=wheel

      - name: Generate server requirements
        run: >
          poetry export
          -f requirements.txt
          -o dist/requirements.txt
          --without-hashes
          --without-urls
          --with server

      - name: Save wheel
        uses: actions/upload-artifact@v4
        with:
          name: freeze
          path: dist/

      - name: Add artifacts to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Uploading artifacts to release ${{ needs.trigger-release.outputs.tag_name }}"
          gh release upload ${{ needs.trigger-release.outputs.tag_name }} ./dist/*.whl
      

  publish-pypi:
    name: "Publish package to PyPi repository"
    needs: publish-github
    if: needs.trigger-release.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - name: "Test"
        run: |
          echo "Testing"

  publish-docker:
    name: "Publish package to DockerHub"
    needs: publish-github
    if: needs.trigger-release.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: freeze
          path: dist/

      - name: SetUp QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.SIXSQ_DOCKER_USERNAME }}
          password: ${{ secrets.SIXSQ_DOCKER_PASSWORD }}
      - name: "Print me tag"
        run: |
          echo "Tag is ${{ needs.trigger-release.outputs.tag_name }}"

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          build-args: |
            GIT_BRANCH=${{ github.head_ref || github.ref_name }}
            GIT_BUILD_TIME=$(date --utc +%FT%T.%3NZ)
            GIT_COMMIT_ID=${{ github.sha }}
            PACKAGE_TAG=${{ needs.trigger-release.outputs.tag_name }}
            GITHUB_RUN_NUMBER=${{ github.run_number }}
            GITHUB_RUN_ID=${{ github.run_id }}
            PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
            PACKAGE_NAME=${{ env.PACKAGE_NAME }}
          push: true
          tags: >
            nuvladev/job:${{ github.head_ref || github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

#  notify:
#    name: Post Workflow Status To Slack
#    needs: release
#    if: needs.release.outputs.release_created
#    runs-on: ubuntu-latest
#    steps:
#      - uses: Gamesight/slack-workflow-status@master
#        with:
#          repo_token: ${{secrets.GITHUB_TOKEN}}
#          slack_webhook_url: ${{secrets.SLACK_WEBHOOK_URL}}
#          include_commit_message: true